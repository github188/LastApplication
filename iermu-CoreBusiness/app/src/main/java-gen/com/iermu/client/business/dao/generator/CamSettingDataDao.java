package com.iermu.client.business.dao.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.iermu.client.model.CamSettingData;
import com.iermu.client.model.CamSettingData.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAM_SETTING_DATA".
*/
public class CamSettingDataDao extends AbstractDao<CamSettingData, Long> {

    public static final String TABLENAME = "CAM_SETTING_DATA";

    /**
     * Properties of entity CamSettingData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueId = new Property(1, String.class, "uniqueId", false, "UNIQUE_ID");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property IsAlarmOpen = new Property(4, Integer.class, "isAlarmOpen", false, "IS_ALARM_OPEN");
        public final static Property InfoJson = new Property(5, String.class, "infoJson", false, "INFO_JSON");
    };


    public CamSettingDataDao(DaoConfig config) {
        super(config);
    }
    
    public CamSettingDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAM_SETTING_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_ID\" TEXT NOT NULL UNIQUE ," + // 1: uniqueId
                "\"UID\" TEXT NOT NULL ," + // 2: uid
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 3: deviceId
                "\"IS_ALARM_OPEN\" INTEGER," + // 4: isAlarmOpen
                "\"INFO_JSON\" TEXT);"); // 5: infoJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAM_SETTING_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CamSettingData entity) {
        stmt.clearBindings();
        if(entity.hasId()) {
            stmt.bindLong(1, entity.getId());
        }
        if(entity.hasUniqueId()) {
            stmt.bindString(2, entity.getUniqueId());
        }
        if(entity.hasUid()) {
            stmt.bindString(3, entity.getUid());
        }
        if(entity.hasDeviceId()) {
            stmt.bindString(4, entity.getDeviceId());
        }
        if(entity.hasIsAlarmOpen()) {
            stmt.bindLong(5, entity.getIsAlarmOpen());
        }
        if(entity.hasInfoJson()) {
            stmt.bindString(6, entity.getInfoJson());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CamSettingData readEntity(Cursor cursor, int offset) {
        Builder builder = CamSettingData.newBuilder();
        if (!cursor.isNull(offset + 0)) {
            builder.setId(cursor.getLong(offset + 0));
        }
        builder.setUniqueId(cursor.getString(offset + 1));
        builder.setUid(cursor.getString(offset + 2));
        builder.setDeviceId(cursor.getString(offset + 3));
        if (!cursor.isNull(offset + 4)) {
            builder.setIsAlarmOpen(cursor.getInt(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            builder.setInfoJson(cursor.getString(offset + 5));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CamSettingData entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CamSettingData entity, long rowId) {
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CamSettingData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
