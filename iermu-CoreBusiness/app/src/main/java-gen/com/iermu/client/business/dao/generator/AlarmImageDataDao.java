package com.iermu.client.business.dao.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.iermu.client.model.AlarmImageData;
import com.iermu.client.model.AlarmImageData.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALARM_IMAGE_DATA".
*/
public class AlarmImageDataDao extends AbstractDao<AlarmImageData, Long> {

    public static final String TABLENAME = "ALARM_IMAGE_DATA";

    /**
     * Properties of entity AlarmImageData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Recdatetime = new Property(4, String.class, "recdatetime", false, "RECDATETIME");
        public final static Property Alarmtime = new Property(5, String.class, "alarmtime", false, "ALARMTIME");
    };


    public AlarmImageDataDao(DaoConfig config) {
        super(config);
    }
    
    public AlarmImageDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALARM_IMAGE_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"RECDATETIME\" TEXT," + // 4: recdatetime
                "\"ALARMTIME\" TEXT);"); // 5: alarmtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALARM_IMAGE_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AlarmImageData entity) {
        stmt.clearBindings();
        if(entity.hasId()) {
            stmt.bindLong(1, entity.getId());
        }
        if(entity.hasTitle()) {
            stmt.bindString(2, entity.getTitle());
        }
        if(entity.hasDescription()) {
            stmt.bindString(3, entity.getDescription());
        }
        if(entity.hasDeviceId()) {
            stmt.bindString(4, entity.getDeviceId());
        }
        if(entity.hasRecdatetime()) {
            stmt.bindString(5, entity.getRecdatetime());
        }
        if(entity.hasAlarmtime()) {
            stmt.bindString(6, entity.getAlarmtime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AlarmImageData readEntity(Cursor cursor, int offset) {
        Builder builder = AlarmImageData.newBuilder();
        if (!cursor.isNull(offset + 0)) {
            builder.setId(cursor.getLong(offset + 0));
        }
        if (!cursor.isNull(offset + 1)) {
            builder.setTitle(cursor.getString(offset + 1));
        }
        if (!cursor.isNull(offset + 2)) {
            builder.setDescription(cursor.getString(offset + 2));
        }
        if (!cursor.isNull(offset + 3)) {
            builder.setDeviceId(cursor.getString(offset + 3));
        }
        if (!cursor.isNull(offset + 4)) {
            builder.setRecdatetime(cursor.getString(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            builder.setAlarmtime(cursor.getString(offset + 5));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AlarmImageData entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AlarmImageData entity, long rowId) {
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AlarmImageData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
