package com.iermu.client.business.dao.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.iermu.client.model.CamLive;
import com.iermu.client.model.CamLive.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAM_LIVE".
*/
public class CamLiveDao extends AbstractDao<CamLive, String> {

    public static final String TABLENAME = "CAM_LIVE";

    /**
     * Properties of entity CamLive.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property ShareId = new Property(3, String.class, "shareId", false, "SHARE_ID");
        public final static Property Uk = new Property(4, String.class, "uk", false, "UK");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property ShareType = new Property(6, Integer.class, "shareType", false, "SHARE_TYPE");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property Thumbnail = new Property(8, String.class, "thumbnail", false, "THUMBNAIL");
        public final static Property DataType = new Property(9, Integer.class, "dataType", false, "DATA_TYPE");
        public final static Property ConnectType = new Property(10, Integer.class, "connectType", false, "CONNECT_TYPE");
        public final static Property ConnectCid = new Property(11, String.class, "connectCid", false, "CONNECT_CID");
        public final static Property StreamId = new Property(12, String.class, "streamId", false, "STREAM_ID");
        public final static Property CvrDay = new Property(13, String.class, "cvrDay", false, "CVR_DAY");
        public final static Property CvrEndTime = new Property(14, Long.class, "cvrEndTime", false, "CVR_END_TIME");
        public final static Property Avator = new Property(15, String.class, "avator", false, "AVATOR");
        public final static Property OwnerName = new Property(16, String.class, "ownerName", false, "OWNER_NAME");
        public final static Property PersonNum = new Property(17, Integer.class, "personNum", false, "PERSON_NUM");
        public final static Property GoodNum = new Property(18, String.class, "goodNum", false, "GOOD_NUM");
        public final static Property StoreStatus = new Property(19, Integer.class, "storeStatus", false, "STORE_STATUS");
        public final static Property GrantNum = new Property(20, Integer.class, "grantNum", false, "GRANT_NUM");
    };


    public CamLiveDao(DaoConfig config) {
        super(config);
    }
    
    public CamLiveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAM_LIVE\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 2: deviceId
                "\"SHARE_ID\" TEXT," + // 3: shareId
                "\"UK\" TEXT," + // 4: uk
                "\"DESCRIPTION\" TEXT," + // 5: description
                "\"SHARE_TYPE\" INTEGER," + // 6: shareType
                "\"STATUS\" INTEGER," + // 7: status
                "\"THUMBNAIL\" TEXT," + // 8: thumbnail
                "\"DATA_TYPE\" INTEGER," + // 9: dataType
                "\"CONNECT_TYPE\" INTEGER," + // 10: connectType
                "\"CONNECT_CID\" TEXT," + // 11: connectCid
                "\"STREAM_ID\" TEXT," + // 12: streamId
                "\"CVR_DAY\" TEXT," + // 13: cvrDay
                "\"CVR_END_TIME\" INTEGER," + // 14: cvrEndTime
                "\"AVATOR\" TEXT," + // 15: avator
                "\"OWNER_NAME\" TEXT," + // 16: ownerName
                "\"PERSON_NUM\" INTEGER," + // 17: personNum
                "\"GOOD_NUM\" TEXT," + // 18: goodNum
                "\"STORE_STATUS\" INTEGER," + // 19: storeStatus
                "\"GRANT_NUM\" INTEGER);"); // 20: grantNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAM_LIVE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CamLive entity) {
        stmt.clearBindings();
        if(entity.hasUniqueId()) {
            stmt.bindString(1, entity.getUniqueId());
        }
        if(entity.hasUid()) {
            stmt.bindString(2, entity.getUid());
        }
        if(entity.hasDeviceId()) {
            stmt.bindString(3, entity.getDeviceId());
        }
        if(entity.hasShareId()) {
            stmt.bindString(4, entity.getShareId());
        }
        if(entity.hasUk()) {
            stmt.bindString(5, entity.getUk());
        }
        if(entity.hasDescription()) {
            stmt.bindString(6, entity.getDescription());
        }
        if(entity.hasShareType()) {
            stmt.bindLong(7, entity.getShareType());
        }
        if(entity.hasStatus()) {
            stmt.bindLong(8, entity.getStatus());
        }
        if(entity.hasThumbnail()) {
            stmt.bindString(9, entity.getThumbnail());
        }
        if(entity.hasDataType()) {
            stmt.bindLong(10, entity.getDataType());
        }
        if(entity.hasConnectType()) {
            stmt.bindLong(11, entity.getConnectType());
        }
        if(entity.hasConnectCid()) {
            stmt.bindString(12, entity.getConnectCid());
        }
        if(entity.hasStreamId()) {
            stmt.bindString(13, entity.getStreamId());
        }
        if(entity.hasCvrDay()) {
            stmt.bindString(14, entity.getCvrDay());
        }
        if(entity.hasCvrEndTime()) {
            stmt.bindLong(15, entity.getCvrEndTime());
        }
        if(entity.hasAvator()) {
            stmt.bindString(16, entity.getAvator());
        }
        if(entity.hasOwnerName()) {
            stmt.bindString(17, entity.getOwnerName());
        }
        if(entity.hasPersonNum()) {
            stmt.bindLong(18, entity.getPersonNum());
        }
        if(entity.hasGoodNum()) {
            stmt.bindString(19, entity.getGoodNum());
        }
        if(entity.hasStoreStatus()) {
            stmt.bindLong(20, entity.getStoreStatus());
        }
        if(entity.hasGrantNum()) {
            stmt.bindLong(21, entity.getGrantNum());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CamLive readEntity(Cursor cursor, int offset) {
        Builder builder = CamLive.newBuilder();
        builder.setUniqueId(cursor.getString(offset + 0));
        builder.setUid(cursor.getString(offset + 1));
        builder.setDeviceId(cursor.getString(offset + 2));
        if (!cursor.isNull(offset + 3)) {
            builder.setShareId(cursor.getString(offset + 3));
        }
        if (!cursor.isNull(offset + 4)) {
            builder.setUk(cursor.getString(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            builder.setDescription(cursor.getString(offset + 5));
        }
        if (!cursor.isNull(offset + 6)) {
            builder.setShareType(cursor.getInt(offset + 6));
        }
        if (!cursor.isNull(offset + 7)) {
            builder.setStatus(cursor.getInt(offset + 7));
        }
        if (!cursor.isNull(offset + 8)) {
            builder.setThumbnail(cursor.getString(offset + 8));
        }
        if (!cursor.isNull(offset + 9)) {
            builder.setDataType(cursor.getInt(offset + 9));
        }
        if (!cursor.isNull(offset + 10)) {
            builder.setConnectType(cursor.getInt(offset + 10));
        }
        if (!cursor.isNull(offset + 11)) {
            builder.setConnectCid(cursor.getString(offset + 11));
        }
        if (!cursor.isNull(offset + 12)) {
            builder.setStreamId(cursor.getString(offset + 12));
        }
        if (!cursor.isNull(offset + 13)) {
            builder.setCvrDay(cursor.getString(offset + 13));
        }
        if (!cursor.isNull(offset + 14)) {
            builder.setCvrEndTime(cursor.getLong(offset + 14));
        }
        if (!cursor.isNull(offset + 15)) {
            builder.setAvator(cursor.getString(offset + 15));
        }
        if (!cursor.isNull(offset + 16)) {
            builder.setOwnerName(cursor.getString(offset + 16));
        }
        if (!cursor.isNull(offset + 17)) {
            builder.setPersonNum(cursor.getInt(offset + 17));
        }
        if (!cursor.isNull(offset + 18)) {
            builder.setGoodNum(cursor.getString(offset + 18));
        }
        if (!cursor.isNull(offset + 19)) {
            builder.setStoreStatus(cursor.getInt(offset + 19));
        }
        if (!cursor.isNull(offset + 20)) {
            builder.setGrantNum(cursor.getInt(offset + 20));
        }
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CamLive entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CamLive entity, long rowId) {
        return entity.getUniqueId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CamLive entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
