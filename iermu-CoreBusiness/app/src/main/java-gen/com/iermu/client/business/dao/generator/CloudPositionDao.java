package com.iermu.client.business.dao.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.iermu.client.model.CloudPosition;
import com.iermu.client.model.CloudPosition.Builder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOUD_POSITION".
*/
public class CloudPositionDao extends AbstractDao<CloudPosition, String> {

    public static final String TABLENAME = "CLOUD_POSITION";

    /**
     * Properties of entity CloudPosition.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UniqueId = new Property(0, String.class, "uniqueId", true, "UNIQUE_ID");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Preset = new Property(3, int.class, "preset", false, "PRESET");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property ImagePath = new Property(5, String.class, "imagePath", false, "IMAGE_PATH");
        public final static Property AddDate = new Property(6, long.class, "addDate", false, "ADD_DATE");
    };


    public CloudPositionDao(DaoConfig config) {
        super(config);
    }
    
    public CloudPositionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOUD_POSITION\" (" + //
                "\"UNIQUE_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: uniqueId
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"DEVICE_ID\" TEXT NOT NULL ," + // 2: deviceId
                "\"PRESET\" INTEGER NOT NULL ," + // 3: preset
                "\"TITLE\" TEXT," + // 4: title
                "\"IMAGE_PATH\" TEXT," + // 5: imagePath
                "\"ADD_DATE\" INTEGER NOT NULL );"); // 6: addDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOUD_POSITION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CloudPosition entity) {
        stmt.clearBindings();
        if(entity.hasUniqueId()) {
            stmt.bindString(1, entity.getUniqueId());
        }
        if(entity.hasUid()) {
            stmt.bindString(2, entity.getUid());
        }
        if(entity.hasDeviceId()) {
            stmt.bindString(3, entity.getDeviceId());
        }
        if(entity.hasPreset()) {
            stmt.bindLong(4, entity.getPreset());
        }
        if(entity.hasTitle()) {
            stmt.bindString(5, entity.getTitle());
        }
        if(entity.hasImagePath()) {
            stmt.bindString(6, entity.getImagePath());
        }
        if(entity.hasAddDate()) {
            stmt.bindLong(7, entity.getAddDate());
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CloudPosition readEntity(Cursor cursor, int offset) {
        Builder builder = CloudPosition.newBuilder();
        builder.setUniqueId(cursor.getString(offset + 0));
        builder.setUid(cursor.getString(offset + 1));
        builder.setDeviceId(cursor.getString(offset + 2));
        builder.setPreset(cursor.getInt(offset + 3));
        if (!cursor.isNull(offset + 4)) {
            builder.setTitle(cursor.getString(offset + 4));
        }
        if (!cursor.isNull(offset + 5)) {
            builder.setImagePath(cursor.getString(offset + 5));
        }
        builder.setAddDate(cursor.getLong(offset + 6));
        return builder.build();
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CloudPosition entity, int offset) {
        throw new UnsupportedOperationException("Protobuf objects cannot be modified");
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(CloudPosition entity, long rowId) {
        return entity.getUniqueId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(CloudPosition entity) {
        if(entity != null) {
            return entity.getUniqueId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return false;
    }
    
}
